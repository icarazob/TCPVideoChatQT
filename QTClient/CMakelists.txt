cmake_minimum_required ( VERSION 3.10.0 FATAL_ERROR)

project(QtApplication)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
cmake_policy(SET CMP0020 NEW)


find_package(Qt5Gui REQUIRED)
find_package(Qt5Widgets REQUIRED)
find_package(Qt5MultiMedia REQUIRED)
find_package(Qt5Core REQUIRED)



set(OpenCV_DIR "C:/opencv340/opencv/build")

find_package(OpenCV REQUIRED PATHS ${OpenCV_DIR})

set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /LARGEADDRESSAWARE")

set(model_files
	${PROJECT_SOURCE_DIR}/models/shape_predictor_68_face_landmarks.dat
	${PROJECT_SOURCE_DIR}/models/haarcascade_frontalface_default.xml
)

set(file_settings 
	${PROJECT_SOURCE_DIR}/settings/XMLsettings.xml
)

set(image_files
	${PROJECT_SOURCE_DIR}/images
)

set(music_files
	${PROJECT_SOURCE_DIR}/sound
)
 
foreach(CONFIGURATION ${CMAKE_CONFIGURATION_TYPES})
	file(COPY ${file_settings} DESTINATION ${EXECUTABLE_OUTPUT_PATH}/${CONFIGURATION}/settings)
	file(COPY ${model_files} DESTINATION ${EXECUTABLE_OUTPUT_PATH}/${CONFIGURATION}/models)
endforeach()

function(copy_images dir)
	file(GLOB IMAGES "${dir}/*.png")

	foreach(CONFIGURATION ${CMAKE_CONFIGURATION_TYPES})
		file(COPY ${IMAGES} DESTINATION ${EXECUTABLE_OUTPUT_PATH}/${CONFIGURATION}/images)
	endforeach()

endfunction(copy_images)

function(copy_music dir)
	file(GLOB MUSIC "${dir}/*.wav")

	foreach(CONFIGURATION ${CMAKE_CONFIGURATION_TYPES})
		file(COPY ${MUSIC} DESTINATION ${EXECUTABLE_OUTPUT_PATH}/${CONFIGURATION}/sound)
	endforeach()

endfunction(copy_music)

copy_images(${image_files})
copy_music(${music_files})


#include_directories( ${OpenCV_INCLUDE_DIRS})
#add_executable(${PROJECT_NAME}  ${HEADERS} ${SOURCES})
	
#set_target_properties(${PROJECT_NAME} PROPERTIES
#			WIN32_EXECUTABLE YES
#)	

set(DLIB_DIRS "C:/dlib/dlib-19.6")
set(DLIB_LIBS "C:/dlib/build/dlib/Release")
set(FFMPEG_DIRS "E:/libraries/ffmpeg-4.1/ffmpeg-4.1-win64-dev/include")
set(FFMPEG_LIBS "E:/libraries/ffmpeg-4.1/ffmpeg-4.1-win64-dev/lib")

set(Qt5DLL_DIR ${Qt5Core_DIR}/../../../bin)

foreach(CONFIGURATION ${CMAKE_CONFIGURATION_TYPES})
		
		if (CONFIGURATION STREQUAL "Debug")			
			#file(COPY ${OpenCV_DIR}/x64/vc14/bin/opencv_world341d.dll DESTINATION ${EXECUTABLE_OUTPUT_PATH}/${CONFIGURATION})
			file(COPY ${Qt5DLL_DIR}/Qt5Cored.dll DESTINATION ${EXECUTABLE_OUTPUT_PATH}/${CONFIGURATION})
			file(COPY ${Qt5DLL_DIR}/Qt5Guid.dll DESTINATION ${EXECUTABLE_OUTPUT_PATH}/${CONFIGURATION})
			file(COPY ${Qt5DLL_DIR}/Qt5Widgetsd.dll DESTINATION ${EXECUTABLE_OUTPUT_PATH}/${CONFIGURATION})
			file(COPY ${Qt5DLL_DIR}/Qt5MultiMediad.dll DESTINATION ${EXECUTABLE_OUTPUT_PATH}/${CONFIGURATION})
			file(COPY ${Qt5DLL_DIR}/Qt5MultimediaWidgetsd.dll DESTINATION ${EXECUTABLE_OUTPUT_PATH}/${CONFIGURATION})
			file(COPY ${Qt5DLL_DIR}/Qt5Networkd.dll DESTINATION ${EXECUTABLE_OUTPUT_PATH}/${CONFIGURATION})
        else()

			file(COPY ${Qt5DLL_DIR}/Qt5Core.dll DESTINATION ${EXECUTABLE_OUTPUT_PATH}/${CONFIGURATION})
			file(COPY ${Qt5DLL_DIR}/Qt5Gui.dll DESTINATION ${EXECUTABLE_OUTPUT_PATH}/${CONFIGURATION})
			file(COPY ${Qt5DLL_DIR}/Qt5Widgets.dll DESTINATION ${EXECUTABLE_OUTPUT_PATH}/${CONFIGURATION})
			file(COPY ${Qt5DLL_DIR}/Qt5MultiMedia.dll DESTINATION ${EXECUTABLE_OUTPUT_PATH}/${CONFIGURATION})
			file(COPY ${Qt5DLL_DIR}/Qt5MultimediaWidgets.dll DESTINATION ${EXECUTABLE_OUTPUT_PATH}/${CONFIGURATION})
			file(COPY ${Qt5DLL_DIR}/Qt5Network.dll DESTINATION ${EXECUTABLE_OUTPUT_PATH}/${CONFIGURATION})
            #file(GLOB ffmpegLibs ${ffmpeg_ROOT_DIR}/lib/${MSVC_DIR}/${BUILD_PLATFORM}/Release/*.dll)
			
        endif()
endforeach()

include_directories(
    ${CMAKE_SOURCE_DIR}
)


add_subdirectory(Core)
add_subdirectory(Controllers)
add_subdirectory(Ui)
add_subdirectory(Application)
add_subdirectory(FFmpegLib)
